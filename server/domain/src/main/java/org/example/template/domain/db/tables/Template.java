/*
 * This file is generated by jOOQ.
 */
package org.example.template.domain.db.tables;


import java.util.Arrays;
import java.util.List;

import org.example.template.domain.db.Indexes;
import org.example.template.domain.db.Keys;
import org.example.template.domain.db.Public;
import org.example.template.domain.db.tables.records.TemplateRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Template extends TableImpl<TemplateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.template</code>
     */
    public static final Template TEMPLATE = new Template();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TemplateRecord> getRecordType() {
        return TemplateRecord.class;
    }

    /**
     * The column <code>public.template.id</code>.
     */
    public final TableField<TemplateRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.template.name</code>.
     */
    public final TableField<TemplateRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.template.value</code>.
     */
    public final TableField<TemplateRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR(2048), this, "");

    private Template(Name alias, Table<TemplateRecord> aliased) {
        this(alias, aliased, null);
    }

    private Template(Name alias, Table<TemplateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.template</code> table reference
     */
    public Template(String alias) {
        this(DSL.name(alias), TEMPLATE);
    }

    /**
     * Create an aliased <code>public.template</code> table reference
     */
    public Template(Name alias) {
        this(alias, TEMPLATE);
    }

    /**
     * Create a <code>public.template</code> table reference
     */
    public Template() {
        this(DSL.name("template"), null);
    }

    public <O extends Record> Template(Table<O> child, ForeignKey<O, TemplateRecord> key) {
        super(child, key, TEMPLATE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX__TEMPLATE__NAME);
    }

    @Override
    public Identity<TemplateRecord, Long> getIdentity() {
        return (Identity<TemplateRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TemplateRecord> getPrimaryKey() {
        return Keys.TEMPLATE_PKEY;
    }

    @Override
    public List<UniqueKey<TemplateRecord>> getKeys() {
        return Arrays.<UniqueKey<TemplateRecord>>asList(Keys.TEMPLATE_PKEY);
    }

    @Override
    public Template as(String alias) {
        return new Template(DSL.name(alias), this);
    }

    @Override
    public Template as(Name alias) {
        return new Template(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Template rename(String name) {
        return new Template(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Template rename(Name name) {
        return new Template(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
